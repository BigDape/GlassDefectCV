<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.11.0.0">
<procedure name="Create_Detect_Area">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="RoiDetect" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DetectArea" base_type="iconic" dimension="0"/>
<par name="RegionUnionLine" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DetectDir" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="L" base_type="ctrl" dimension="0"/>
<par name="W" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>get_image_size (Image, Width, Height)</l>
<l>smallest_rectangle1 (RoiDetect, Row1, Col1, Row2, Col2)</l>
<l>a:=30</l>
<l>b:=30</l>
<l>gen_empty_obj (DetectArea)</l>
<l>gen_empty_obj (RegionUnionLine)</l>
<l>try</l>
<c>    </c>
<l>    if (DetectDir=='UpLeft')</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1, 50, 'positive', 'first', Row1, Col2, Row1, Col1+200, ResultRow, ResultColumn)</l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 5, Row11, Col11, Row12,Col12)</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1,50, 'positive', 'first',Row1+200, Col1,Row2, Col1,   ResultRow, ResultColumn)   </l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 5, Row21, Col21, Row22,Col22)</l>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, Row21, Col21, Row22,Col22, intersectionRow1, intersectionColumn1, IsOverlapping)</l>
<l>        gen_region_line (RegionLines3, intersectionRow1+b, intersectionColumn1+5, intersectionRow1+5, intersectionColumn1+b)   </l>
<c>        </c>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, 0, Width, Height,Width, intersectionRow2, intersectionColumn2, IsOverlapping)</l>
<l>        gen_region_line (RegionLines1, intersectionRow1+5, intersectionColumn1+a, intersectionRow2+5, intersectionColumn2)</l>
<l>        gen_region_line (RegionLinesC1, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<l>        intersection_lines (Row21, Col21, Row22,Col22, Height, 0, Height, Width, intersectionRow2, intersectionColumn2, IsOverlapping)</l>
<l>        gen_region_line (RegionLines2, intersectionRow1+a, intersectionColumn1+5, intersectionRow2, intersectionColumn2+5)</l>
<l>        gen_region_line (RegionLinesC2, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<l>        union2 (RegionLinesC1, RegionLinesC2, RegionUnionLine)</l>
<c>        </c>
<l>        concat_obj  (RegionLines1, RegionLines2, RegionUnion)</l>
<l>        concat_obj  (RegionUnion, RegionLines3, DetectArea) </l>
<l>        dilation_circle (DetectArea, DetectArea,25)</l>
<c>        </c>
<l>        L:=Height-intersectionRow1</l>
<l>        W:=Width-intersectionColumn1</l>
<c>        </c>
<c>    </c>
<l>    elseif(DetectDir=='UpRight')</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1, 30, 'positive', 'first', Row1, Col2-200, Row1, Col1, ResultRow, ResultColumn)    </l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 10, Row11, Col11, Row12,Col12)</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1, 30, 'positive', 'first',Row2, Col2, Row1+100, Col2,  ResultRow, ResultColumn)   </l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 5, Row21, Col21, Row22,Col22)</l>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, Row21, Col21, Row22,Col22, intersectionRow1, intersectionColumn1, IsOverlapping)</l>
<l>        gen_region_line (RegionLines3, intersectionRow1+5, intersectionColumn1-b, intersectionRow1+b, intersectionColumn1-5)  </l>
<l>        CenterPointRow:=intersectionRow1</l>
<l>        CenterPointCol:= intersectionColumn1  </l>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, 0, 0, Height, 0, intersectionRow2, intersectionColumn2, IsOverlapping)</l>
<l>        gen_region_line (RegionLines1, intersectionRow1+5, intersectionColumn1-a, intersectionRow2+5, intersectionColumn2)</l>
<l>        gen_region_line (RegionLinesC1, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<c>        </c>
<l>        intersection_lines (Row21, Col21, Row22,Col22, Height, 0, Height, Width, intersectionRow2, intersectionColumn2, IsOverlapping)</l>
<l>        gen_region_line (RegionLines2, intersectionRow1+a, intersectionColumn1-5, intersectionRow2, intersectionColumn2-5)</l>
<l>        gen_region_line (RegionLinesC2, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<l>        union2 (RegionLinesC1, RegionLinesC2, RegionUnionLine)</l>
<c>        </c>
<l>        concat_obj  (RegionLines1, RegionLines2, RegionUnion)</l>
<l>        concat_obj  (RegionUnion, RegionLines3, DetectArea)  </l>
<l>        dilation_circle (DetectArea, DetectArea,25)</l>
<c>        </c>
<l>        L:=Height-intersectionRow1</l>
<l>        W:=intersectionColumn1</l>
<c>        </c>
<l>    elseif(DetectDir=='DownLeft')</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1, 30, 'positive', 'first',Row2, Col1+200, Row2, Col2,  ResultRow, ResultColumn)</l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 5, Row11, Col11, Row12,Col12)</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1, 30, 'positive', 'first',Row1, Col1,Row2-100, Col1,   ResultRow, ResultColumn)   </l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 5, Row21, Col21, Row22,Col22)</l>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, Row21, Col21, Row22,Col22, intersectionRow1, intersectionColumn1, IsOverlapping)</l>
<l>        gen_region_line (RegionLines3, intersectionRow1-b, intersectionColumn1+5, intersectionRow1-5, intersectionColumn1+b)   </l>
<l>        CenterPointRow:=intersectionRow1</l>
<l>        CenterPointCol:= intersectionColumn1  </l>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, 0, Width, Height, Width, intersectionRow2, intersectionColumn2, IsOverlapping)</l>
<l>        gen_region_line (RegionLines1, intersectionRow1-5, intersectionColumn1+a, intersectionRow2-5, intersectionColumn2)</l>
<l>        gen_region_line (RegionLinesC1, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<c>        </c>
<l>        intersection_lines (Row21, Col21, Row22,Col22, 0, 0, 0, Width, intersectionRow2, intersectionColumn2, IsOverlapping)  </l>
<l>        gen_region_line (RegionLines2, intersectionRow1-a, intersectionColumn1+5, intersectionRow2, intersectionColumn2+5)</l>
<l>        gen_region_line (RegionLinesC2, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<l>        union2 (RegionLinesC1, RegionLinesC2, RegionUnionLine)</l>
<c>        </c>
<l>        concat_obj  (RegionLines1, RegionLines2, RegionUnion)</l>
<l>        concat_obj  (RegionUnion, RegionLines3, DetectArea) </l>
<l>        dilation_circle (DetectArea, DetectArea,25)</l>
<c>        </c>
<l>        L:=intersectionRow1</l>
<l>        W:=Width-intersectionColumn1</l>
<c>        </c>
<c>        </c>
<l>    elseif(DetectDir=='DownRight')</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1, 30, 'positive', 'first', Row2, Col1,Row2, Col2-500,  ResultRow, ResultColumn)</l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 5, Row11, Col11, Row12,Col12)</l>
<l>        rake (Image, Regions1, 30, 800, 10, 1, 30, 'positive', 'first',Row2-100, Col2, Row1, Col2,  ResultRow, ResultColumn)   </l>
<l>        pts_to_best_line (Line, ResultRow, ResultColumn, 5, Row21, Col21, Row22,Col22)</l>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, Row21, Col21, Row22,Col22, intersectionRow1, intersectionColumn1, IsOverlapping)</l>
<l>        gen_region_line (RegionLines3, intersectionRow1-5, intersectionColumn1-b, intersectionRow1-b, intersectionColumn1-5)   </l>
<l>        CenterPointRow:=intersectionRow1</l>
<l>        CenterPointCol:= intersectionColumn1  </l>
<c>        </c>
<l>        intersection_lines (Row11, Col11, Row12,Col12, Height, 0, 0, 0, intersectionRow2, intersectionColumn2, IsOverlapping)</l>
<l>        gen_region_line (RegionLines1, intersectionRow1-5, intersectionColumn1-a, intersectionRow2-5, intersectionColumn2)</l>
<l>        gen_region_line (RegionLinesC1, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<l>        intersection_lines (Row21, Col21, Row22,Col22, 0, 0, 0, Width, intersectionRow2, intersectionColumn2, IsOverlapping)</l>
<l>        gen_region_line (RegionLines2, intersectionRow1-a, intersectionColumn1-5, intersectionRow2, intersectionColumn2-5)</l>
<l>        gen_region_line (RegionLinesC2, intersectionRow1, intersectionColumn1, intersectionRow2, intersectionColumn2)</l>
<c>        </c>
<l>        union2 (RegionLinesC1, RegionLinesC2, RegionUnionLine)</l>
<c>        </c>
<l>        concat_obj  (RegionLines1, RegionLines2, RegionUnion)</l>
<l>        concat_obj  (RegionUnion, RegionLines3, DetectArea) </l>
<l>        dilation_circle (DetectArea, DetectArea,25)</l>
<c>        </c>
<l>        L:=intersectionRow1</l>
<l>        W:=intersectionColumn1</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    return () </l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Create_Detect_Area">
<parameters>
<parameter id="DetectArea"/>
<parameter id="DetectDir"/>
<parameter id="Image"/>
<parameter id="L"/>
<parameter id="RegionUnionLine"/>
<parameter id="RoiDetect"/>
<parameter id="W"/>
</parameters>
</docu>
</procedure>
</hdevelop>
